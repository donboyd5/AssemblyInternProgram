---
output: html_document
editor_options:
  chunk_output_type: console
---

# Introduction

```{r}
#| label: setup

rpd <- here::here("research_paper")
source(fs::path(rpd, "libraries.R"))
library(googledrive)

drive_auth()
gs4_auth(token = drive_token())

```


```{r}
#| label: get-sheet

url <- "https://docs.google.com/spreadsheets/d/1K_xIaxnXMwdkRhHSWL2rBSnhaWRRDKNMGypEdbvFO0I"
# url <- "https://docs.google.com/spreadsheets/d/1K_xIaxnXMwdkRhHSWL2rBSnhaWRRDKNMGypEdbvFO0I/edit#gid=402950202"

# gs4_deauth()
# read_sheet(url)
# as_sheets_id(url)

df1 <- read_sheet(url, sheet = "Cycle1_ResearchPaper")
df1

weights <- df1 |> 
  filter(lname=="weight") |> 
  select(id=lname, ends_with("_numeric")) |> 
  pivot_longer(-id, values_to = "weight")
sum(weights$weight)

# cnames <- df1 |> 
#   filter(row_number()==1) |> 
#   as.character()

# df2 <- df1 |> 
#   select(lname=1, fname=2, fnln=3, emailp=4,
#          emaila=5, rdate=6, billnum=7, billdesc=8,
#          gradefin=9, latepen=10, gradebase=11,
#          writing=12) |> 
#   filter(row_number() > 1, !is.na(fnln))

df2 <- df1 |> 
  filter(row_number() > 2)

df2

# calculate gradebase
grades <- df2 |> 
  select(lname, fname, ends_with("_numeric")) |> 
  pivot_longer(cols=-c(lname, fname)) |> 
  left_join(weights |> select(name, weight),
            by = join_by(name)) |> 
  summarise(gradebase=sum(value * weight), .by=c(lname, fname))

df3 <- df2 |> 
  select(-gradebase) |> 
  left_join(grades,
            by = join_by(lname, fname)) |> 
  mutate(gradebase=round(gradebase * 10, 1)) |> 
  relocate(gradebase, .after=latepen)
  


```


```{r}

template <- fs::path(rpd, "template.Rmd")
grdir <- fs::path(rpd, "grade_reports")

gendoc <- function(row) {
  filename <- paste0(row$lname, "_", row$fname, "_paper_grade.pdf")
  fpath <- fs::path(grdir, filename)
  rmarkdown::render(
    template,
    output_file = fpath, # Change to .docx for Word
    params = list(
      student = row$fnln,
      billnum = row$billnum,
      billdesc = row$billdesc,
      gradebase = row$gradebase,
      policy = row$policy,
      policy_numeric = row$policy_numeric,
      politics = row$politics,
      politics_numeric = row$politics_numeric,
      democracy = row$democracy,
      democracy_numeric = row$democracy_numeric,
      research = row$research,
      research_numeric = row$research_numeric,
      writing = row$writing,
      writing_numeric = row$writing_numeric
      )
  )
  }

# gendoc(df3[1, ])  # me
i <- 4
gendoc(df3[i, ])

walk(1:1, \(i) gendoc(df3[i, ]))


```




```{r}



f <- function(row){
  print(row$fnln)
  print(row$billnum)
  
  report <- paste0(
    "# ", row$fnln, "\n\n",
    "## Feature 1\n", row$emailp, "\n\n",
    "## Feature 2\n", row$billnum, "\n\n",
    "## Feature 3\n", row$billdesc
  )  
  # print(report)
  
  rmarkdown::render(
    input = report,
    run_pandoc = TRUE,
    output_file = "a", # paste0(row$fnln, ".pdf"), # or ".docx" for Word
    output_dir = "c:\\",
    output_format = "pdf_document" # or "word_document" for Word
  )
}

walk(1:3, \(i) f(df2[i, ]))


# Example data
df <- tibble::tibble(
  product_name = c("Product A", "Product B"),
  feature1 = c("Detailed description of feature 1 for Product A...", "Detailed description of feature 1 for Product B..."),
  feature2 = c("Detailed description of feature 2 for Product A...", "Detailed description of feature 2 for Product B..."),
  feature3 = c("Detailed description of feature 3 for Product A...", "Detailed description of feature 3 for Product B...")
)
df

temp <- fs::path(rpd, "template.Rmd")

generate_documents <- function(data) {
  for (i in 1:nrow(data)) {
    rmarkdown::render(temp, output_file = paste0(data$product_name[i], ".pdf"), # Change to .docx for Word
           params = list(
             product_name = data$product_name[i],
             feature1 = data$feature1[i],
             feature2 = data$feature2[i],
             feature3 = data$feature3[i]
           )
    )
  }
}

# Apply the function to your dataframe
generate_documents(df)


```



```{r}

generate_report <- function(product_row) {
  product_name <- product_row$product_name
  feature1 <- product_row$feature1
  feature2 <- product_row$feature2
  feature3 <- product_row$feature3
  
  report_content <- paste0(
    "# ", product_name, "\n\n",
    "## Feature 1\n", feature1, "\n\n",
    "## Feature 2\n", feature2, "\n\n",
    "## Feature 3\n", feature3
  )
  
  rmarkdown::render(
    text = report_content,
    output_file = paste0(product_name, ".pdf"), # or ".docx" for Word
    output_format = "pdf_document" # or "word_document" for Word
  )
}

generate_report <- function(row) {
  
  # report_content <- paste0(
  #   "# ", row$fnln, "\n\n",
  #   "## The bill 1\n", row$billnum, "\n\n",
  #   "## Feature 2\n", row$billdesc, "\n\n",
  #   "## Feature 3\n", row$emailp
  # )
  
  # print(row$fnln)
  print(unlist(row))
  
  # rmarkdown::render(
  #   text = report_content,
  #   output_file = paste0(forw$fnln, ".pdf"), # or ".docx" for Word
  #   output_format = "pdf_document" # or "word_document" for Word
  # )
}

purrr::walk(df2[1:2, ], generate_report)

purrr::pwalk(df2[1:2, ], generate_report)

f <- function(row){
  print(row$fnln)
  print(row$billnum)
}

for(i in 1:3){
  f(df2[i, ])
}

walk(1:3, \(i) f(df2[i, ]))

rn <- 2
f(df2[rn, ])

df2 |> 
  filter(row_number() <= 3) |> 
  rowwise() |> 
  purrr::map(f)

df2 %>%
  slice(1:n()) %>%
  pmap(f)


walk(df2[1:3, ], f)

f(df2[1:3, ])

# Example tibble
df <- tibble(a = 1:3, b = 4:6, c = 7:9)

# Function that operates on a row
f <- function(row) {
  print(row$a)
}

# Apply function to each row
pmap(df, f)

df %>%
  rowwise() %>%
  mutate(result = list(f(cur_data()))) %>%
  ungroup()

df |> 
  rowwise() |> 
  f(cur_data())

purrr::map(df2[1:3, ], f)



```

